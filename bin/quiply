#!/usr/bin/env ruby

#              _       _
#   __ _ _   _(_)_ __ | |_   _
#  / _` | | | | | '_ \| | | | |
# | (_| | |_| | | |_) | | |_| |
#  \__, |\__,_|_| .__/|_|\__, |
#   by|_|stephan|_|dotcom|___/

# quiply - cohorts challenge

require 'methadone'
require 'pry'
require 'groupdate'
require 'quiply'

include Methadone::Main
include Methadone::CLILogging
include Quiply


main do |users_csv, orders_csv|
  Import.new(User).import(users_csv)
  Import.new(Order).import(orders_csv)
  puts "there are now #{User.count} users with #{Order.count} orders"

  rows = []
  by_week = User.group_by_week(:created_at).count
# pry
  by_week.each do |week, count|
    # we're not using it yet, but find the users anyway
    timespan = week..(week + 1.week)
    users = User.where(created_at: timespan)
    rows << [
      "#{week.strftime('%-m/%-d')}-#{(week + 1.week).strftime('%-m/%-d')}",
      "#{count} users", # pluralize?
      '??', # collect underpants
      '??',
      '??'
    ]
  end

  table = Terminal::Table.new rows: rows.reverse,
                              headings: %w[Cohort Users 0-7 7-14 14-21 ...],
                              title: 'Cohort Challenge'
  table.align_column(1, :right)
  puts table
  pry
end

options[:weeks] = '8'
options[:format] = 'txt'
options[:start_day] = 'sun'

description <<~EODESC
  given input CSV files of orders and users, group users into cohorts joined by week,
  further subdivided into groups who placed a order in a given week after joining
EODESC

on('-w VALUE', '--weeks', 'override total weeks back of cohorts, default: 8')
formats = %w[txt html csv]
on('-f VALUE', '--format', formats, 'output format, default: txt', "(#{formats.join('|')})")
days = %w[sun mon tue wed thu fri sat]
on('-s VALUE', '--start_day', days, 'day to start week, default: sun', "(#{days.join('|')})")

arg :users_csv, :required, 'input filename for users csv.'
arg :orders_csv, :required, 'input filename for orders csv.'

version Quiply::VERSION, compact: true

go!
